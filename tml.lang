<?xml version="1.0" encoding="UTF-8"?>

<!--
cp ~/Code/Gravel/Silt/os/tml.lang ~/.local/share/gtksourceview-3.0/language-specs/
-->
<language id="tml" name="Tml" version="2.0" _section="Markup">
  <metadata>
    <property name="mimetypes">text/x-tml</property>
    <property name="globs">*.tml</property>
  </metadata>

  <!-- mspired by the XML highlighter (maybe lightweight? R.C.) -->
  <styles>
    <style id="header-text"       name="Heading Text"          map-to="def:statement"/>
    <style id="mark-primary"      name="Primary Mark"          map-to="def:identifier"/>
    <style id="arg-value-elem"    name="Arg Value Elem"        map-to="def:identifier"/>
    <!-- def:type is bold -->
    <style id="arg-mark"          name="Mark"                  map-to="def:type"/>
    <style id="arg-value"         name="Arg Value"             map-to="def:string"/>
    <style id="arg-value-url"     name="Arg Value URL"         map-to="def:underlined"/>
    <style id="string"            name="String Marks"          map-to="def:string"/>
    <style id="mark-uml"          name="UML Mark"              map-to="def:preprocessor"/>
  </styles>

  <definitions>
    <!--
    Why the octals? They're brackets/parenthesis for URL/URI attributes. 
    Octals don't confuse compilers or people, and are easier to maintain
    than escaped bracket symbols.
    Why use this blob of regex, why not the tidy container contexts?
    Because container contexts are for scattered inserts into a context,
    not strict orderong which TML is. This way intention=clear R.C.
    = captures
    elem, 
    id mark, id value, 
    klass mark, klass value, 
    URL mark, URL value, URL mark
    string mark, string value, string mark
    11 captures total
    (fully optional)
    -->
    <define-regex id="mark-args-no-elem">(?:(\#)(\w+))?(?:(\.)(\w+))?(?:(\050)([^\051]*)(\051))?(?:(\")([^"]*)(\"))?</define-regex>
    <define-regex id="punctuation">[\(\)\[\]\,\:\s]</define-regex>
    <define-regex id="not-punctuation">[^\(\)\[\]\,\:\s]*</define-regex>
    <define-regex id="identifier">[a-zA-Z]\%{not-punctuation}*</define-regex>



    <!-- Headings use a different form of block-level opening mark -->
    <context id="headings">
      <match>^(\={1,6})\%{mark-args-no-elem}\s+(?'header_text'[^\n]+)</match>
      <include>
        <!-- mark -->
        <context sub-pattern="1" style-ref="mark-primary" />
        <!-- id -->
        <context sub-pattern="2" style-ref="arg-mark" />
        <context sub-pattern="3" style-ref="arg-value" />
        <!-- klass -->
        <context sub-pattern="4" style-ref="arg-mark" />
        <context sub-pattern="5" style-ref="arg-value" />
        <!-- URL -->
        <context sub-pattern="6" style-ref="arg-mark" />
        <context sub-pattern="7" style-ref="arg-value-url" />
        <context sub-pattern="8" style-ref="arg-mark" />
        <!-- String -->
        <context sub-pattern="9" style-ref="arg-mark" />
        <context sub-pattern="10" style-ref="arg-value" />
        <context sub-pattern="11" style-ref="arg-mark" />
        
        <context sub-pattern="header_text" style-ref="header-text" />
      </include>
    </context>  


    <!--
    A hook at things that will mark. Marks more than may be accepttable
    to some parsers (e.g. '#?' is an ok opener). No attempt to capture, 
    for example, open/close errors. But efficient. 
    -->
    <context id="mark-block">
      <match>^([#>?+])([#>?+]|\w+)?\%{mark-args-no-elem}</match>
      <include>
        <!-- mark -->
        <context sub-pattern="1" style-ref="mark-primary" />
        <!-- elem -->
        <context sub-pattern="2" style-ref="arg-value-elem" />        
        <!-- id -->
        <context sub-pattern="3" style-ref="arg-mark" />
        <context sub-pattern="4" style-ref="arg-value" />
        <!-- klass -->
        <context sub-pattern="5" style-ref="arg-mark" />
        <context sub-pattern="6" style-ref="arg-value" />
        <!-- URL -->
        <context sub-pattern="7" style-ref="arg-mark" />
        <context sub-pattern="8" style-ref="arg-value-url" />
        <context sub-pattern="9" style-ref="arg-mark" />
        <!-- String -->
        <context sub-pattern="10" style-ref="arg-mark" />
        <context sub-pattern="11" style-ref="arg-value" />
        <context sub-pattern="12" style-ref="arg-mark" />
      </include>
    </context>


    <!--
    A stab at list items. With no context risks a ':' clash with UML, 
    which the spec avoids R.C. 
    -->
    <context id="mark-list-item">
      <match>^([\-\~\:])([\-\~\:]|\w+)?\%{mark-args-no-elem}</match>
      <include>
        <!-- mark -->
        <context sub-pattern="1" style-ref="mark-primary" />
        <!-- elem -->
        <context sub-pattern="2" style-ref="arg-value-elem" />        
        <!-- id -->
        <context sub-pattern="3" style-ref="arg-mark" />
        <context sub-pattern="4" style-ref="arg-value" />
        <!-- klass -->
        <context sub-pattern="5" style-ref="arg-mark" />
        <context sub-pattern="6" style-ref="arg-value" />
        <!-- URL -->
        <context sub-pattern="7" style-ref="arg-mark" />
        <context sub-pattern="8" style-ref="arg-value-url" />
        <context sub-pattern="9" style-ref="arg-mark" />
        <!-- String -->
        <context sub-pattern="10" style-ref="arg-mark" />
        <context sub-pattern="11" style-ref="arg-value" />
        <context sub-pattern="12" style-ref="arg-mark" />
      </include>      
    </context>
    
    <context id="mark-inline" class="no-spell-check">
      <match>(\{)(\{|\w+)\%{mark-args-no-elem}(?:\s[^\}]*)?(\})</match>
      <include>
        <!-- mark -->
        <context sub-pattern="1" style-ref="mark-primary" />
        <!-- elem -->
        <context sub-pattern="2" style-ref="arg-value-elem" />
        <!-- id -->
        <context sub-pattern="3" style-ref="arg-mark" />
        <context sub-pattern="4" style-ref="arg-value" />
        <!-- klass -->
        <context sub-pattern="5" style-ref="arg-mark" />
        <context sub-pattern="6" style-ref="arg-value" />
        <!-- URL -->
        <context sub-pattern="7" style-ref="arg-mark" />
        <context sub-pattern="8" style-ref="arg-value-url" />
        <context sub-pattern="9" style-ref="arg-mark" />
        <!-- String -->
        <context sub-pattern="10" style-ref="arg-mark" />
        <context sub-pattern="11" style-ref="arg-value" />
        <context sub-pattern="12" style-ref="arg-mark" />
        <!-- mark -->
        <context sub-pattern="13" style-ref="mark-primary" />
      </include>
    </context>

    
    <!-- UML -->      
    <context id="single-quoted-string">
      <match>(\'\')[^']*(\')</match>
      <include>
        <context sub-pattern="1" style-ref="string" />
        <context sub-pattern="2" style-ref="string" />
      </include>
    </context>

    <context id="double-quoted-string">
      <match>(\"\")[^"]*(\")</match>
      <include>
        <context sub-pattern="1" style-ref="string" />
        <context sub-pattern="2" style-ref="string" />
      </include>
    </context>    

    <context id="guillemet">
      <match>(&lt;&lt;)[^\&gt;]*(&gt;&gt;)</match>
      <include>
        <context sub-pattern="1" style-ref="string" />
        <context sub-pattern="2" style-ref="string" />
      </include>
    </context>      

    <context id="uml-special" class="no-spell-check">
      <!-- Onjects like elipsis are self-explanatory -->
      <match>(?:\([ctr]\))|(?:\:m[\-xo])</match>
      <include>
        <context sub-pattern="0" style-ref="mark-uml"/>
      </include>
    </context>
    
    <context id="tml">
      <include>
        <context ref="def:shebang"/>
        <context ref="headings"/>
        <context ref="mark-block"/>
        <context ref="mark-list-item"/>
        <context ref="mark-inline"/>
        <!-- UML -->
        <context ref="single-quoted-string"/>
        <context ref="double-quoted-string"/>
        <context ref="guillemet"/>
        <context ref="uml-special"/>
      </include>
    </context>
  </definitions>
</language>
